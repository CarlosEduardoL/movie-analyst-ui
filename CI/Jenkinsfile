pipeline {
    agent any
    environment {
        HOME = '.'
        PROJECT = "zeronetdev/rampup-front"
        container = null
        failed_stage = ""
        trace = ""
    }
    stages {
        stage("build front image"){
            steps {
                script {
                    try {
                        container = docker.build(PROJECT)
                    } catch(e) {
                        trace = getStackTrace(e)
                        error(trace)
                    }
                }
            }
            post {
                failure {
                    script {
                        failed_stage = "build image"
                    }
                }
            }
        }
        stage("push image"){
            steps {
                script {
                    try{
                        docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
                            container.push("${BUILD_NUMBER}")
                        }
                    } catch(e) {
                        trace = getStackTrace(e)
                        error(trace)
                    }
                }
            }
            post {
                failure {
                    script {
                        failed_stage = "push image"
                    }
                }
            }
        }
        stage("clean") {
            steps {
                script {
                    try{
                        sh "for image in \$(docker images | grep ${PROJECT} | awk \'{print \$3}\'| uniq); do docker rmi -f \$image; done; exit 1"
                    } catch(e) {
                        trace = getStackTrace(e)
                        error(trace)
                    }
                }
            }
            post {
                failure {
                    script {
                        failed_stage = "clean"
                    }
                }
            }
        }
    }
    post {
        failure {
            script {
                mail to: 'carlos.lizalda1@gmail.com',
                subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                body: "Something is wrong with ${env.BUILD_URL} on ${failed_stage} stage\n${trace}"
            }
        }
    }
}

def String getStackTrace(Throwable aThrowable)
{
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    PrintStream ps = new PrintStream(baos, true);
    aThrowable.printStackTrace(ps);
    return baos.toString();
}